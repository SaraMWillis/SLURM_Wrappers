#!/usr/bin/env python3

# Author : Sara Willis
# Date   : November 2, 2021

# Wrapper for "scontrol show job $SLURM_JOB_ID" and "sacct -j $SLURM_JOB_ID"
# For more information on scontrol and sacct:
#   - https://slurm.schedmd.com/sacct.html
#   - https://slurm.schedmd.com/scontrol.html


import getopt, subprocess, sys, os
'''

------------------------------------------------------------------------------------------
                                           Usage

Print information about usage.
'''
def usage(exit_code):
    print("Usage: job-history $SLURM_JOB_ID")
    sys.exit(exit_code)

'''
------------------------------------------------------------------------------------------
                                        Job Running?

Determines if job is running or not.
'''
def job_is_running(JobID):
    try:
        p = subprocess.Popen(["squeue -h --job " + JobID],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
    except FileNotFoundError:
        print("Oops! Something has gone wrong. Maybe SLURM is not available on this cluster?")
        sys.exit(1)
    out,err = p.communicate()
    out = out.decode('utf-8')
    if out != "":
        return True
    else:
        return False

'''
------------------------------------------------------------------------------------------
                                      Running Job Data

Pull running job data. This will only return data for a job that is currently in the 
"running" state. Once a job ends, this command will return an error. The main benefit of
running this is getting the bash script used to execute the job and the stdout/stderr 
filenames/paths. These aren't provided with sacct.
'''
def running_job_data(JobID):
    try:
        p = subprocess.Popen(["scontrol show job --oneliner --all " + JobID],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
    except FileNotFoundError:
        print("Oops! Something has gone wrong. Maybe SLURM is not available on this cluster?")
        sys.exit(1)
    out,err = p.communicate()
    out = out.decode('utf-8')
    job_data = {}
    for i in out.split(" "):
        try:
            key,value = i.split("=")
            job_data[key] = value
        except ValueError:
            pass
    return job_data

'''
------------------------------------------------------------------------------------------
                                      Sacct Job Data

Pull job data. This output will exist regardless of whether the job is currently running 
or was completed months ago.
'''
def sacct_job_data(JobID):
    try:
        p = subprocess.Popen(["sacct -X -o ALL -p -j " + JobID],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
    except FileNotFoundError:
        print("Oops! Something has gone wrong. Maybe SLURM is not available on this cluster?")
        sys.exit(1)    
    out,err = p.communicate()
    out = out.decode('utf-8')
    if out == "":
        print("Oops! Something's gone wrong. Are you sure the JobID you entered is valid?")
        usage(1)
    out=out.split("\n")
    if out[1] =="":
        print("Oops! Something's gone wrong. Are you sure the JobID you entered is valid?")
        usage(1)
    job_data = zip(out[0].split("|"),out[1].split("|"))
    job_data = {key:value for (key,value) in job_data}
    return job_data
    
'''
------------------------------------------------------------------------------------------
                                        Vis Options

Define some options for display. (Colors? Why not!?)
'''
def vis_options():
    ENDCOLOR="\033[0m"
    FAILCOLOR="\033[0;31m"
    STATUSCOLOR="\033[38;5;32m"
    #HEADINGCOLOR="\033[38;5;55m"
    HEADINGCOLOR="\033[38;5;18m"
    return ENDCOLOR,FAILCOLOR,STATUSCOLOR,HEADINGCOLOR

'''
------------------------------------------------------------------------------------------
                                          Display
Print job data
'''
def grab_value(sacct_dict,running_dict,key):

    try:
       value = sacct_dict[key]
    except KeyError:
       try:
           value = running_dict[key]
       except KeyError:
           value = None
    return value

def display(sacct_dict,running_dict):
    ENDCOLOR, FAILCOLOR,STATUSCOLOR,HEADINGCOLOR = vis_options()
    data_overview = [("JobName","Job Name"),("JobID","Job ID"),("JobIDRaw","Raw JobID"),("State","State"),("ExitCode","Exit Code"),("DerivedExitCode","Derived Exit Code"),("MailUser","User Email"),("MailType","Mail Type"),("Dependency","Dependency")]
    data_accounting = [("User","User"),("UID","UID"),("Account","Account"),("Group","Group"),("GID","Group ID"),("Partition","Partition"),("QOS","QOS"),("QOSRAW","Raw QOS"),("Priority","Priority")]
    data_time = [("Timelimit","Time Limit"),("TimelimitRaw","Time Limit (Raw)"),("Elapsed","Time Elapsed"),("ElapsedRaw","Time Elapsed (raw)"),("CPUTime","CPU Time"),("CPUTimeRAW","CPU Time (raw)"),("Submit","Submit Time"),("Eligible","Eligible Time"),("Start","Start Time"),("PreemptEligibleTime","Preempt Eligible Time"),("PreemptTime","Preempt Time"),("SuspendTime","Suspend Time"),("LastSchedEval","Last Scheduling Eval"),("Restarts","Restarts"),("EndTime","Scheduled End Time"),("End","End Time"),("Deadline","Deadline")]
    data_resources = [("Cluster","Cluster"),("ReqTRES","Requsted Resources"),("ReqMem","Requested RAM"),("ReqCPUS","Requested CPUs"),("ReqNodes","Requested Nodes"),("AllocTRES","Allocated Resources"),("MinMemoryCPU","Allocated RAM/CPU"),("NNodes","Allocated Nodes"),("NumTasks","Allocated Tasks"),("NCPUS","Allocated CPUs"),("CPUs/Task","Allocated CPUs/Task"),("NodeList","Node List"),("ReqNodeList","Required Node List"),("ExcNodeList","Excluded Node List"),("BatchHost","Batch Host"),("OverSubscribe","Oversubscribe")]
    data_io = [("Command","Command"),("WorkDir","Working Directory"),("StdErr","StdErr"),("StdOut","StdOut"),("StdIn","StdIn")]
    data_comments = [("AdminComment","Admin Comment"),("SystemComment","System Comment"),("Comment","Comment"),("Reason","Reason Not Running"),("Licenses","Licenses"),("Network","Network"),("Contiguous","Contiguous"),("Features","Features"),("Flags","Flags"),("Nice","Nice"),("BatchFlag","Batch Flag"),("Requeue","Requeue"),("Reboot","Reboot"),("DBIndex","DBIndex"),("AllocNode:Sid","AllocNode:Sid")]
   
    max_key_length = max([len(i[1]) for i in data_overview+data_accounting+data_time+data_resources+data_io+data_comments])
    job_data = {"Job Overview":data_overview,"Accounting":data_accounting,"Time":data_time,"Resources*":data_resources,"Files & Directories":data_io,"Comments/Misc":data_comments}

    formatting_string = "{0:"+str(max_key_length)+"}: {1:20}"
    
    for key,entry in job_data.items():
        print("\n"+HEADINGCOLOR+key+ENDCOLOR)
        print(HEADINGCOLOR + "="*50+ENDCOLOR+"\n")
        for i in entry:
            value = grab_value(sacct_dict,running_dict,i[0])
            if value == "FAILED":
                value = FAILCOLOR + value + ENDCOLOR
            elif i[0] == "State":
                value = STATUSCOLOR + value + ENDCOLOR
            if value not in ("",None,"Unknown","(null)","None"):
                print(formatting_string.format(i[1],value))

    print("\n"+HEADINGCOLOR+"* If there is a discrepancy between the resources you requested and the resources you were allocated, this may be due to memory requirements. See: https://public.confluence.arizona.edu/display/UAHPC/Compute+Resources#ComputeResources-ExampleResourceRequests"+ENDCOLOR)

'''
------------------------------------------------------------------------------------------
##########################################################################################
                                    Program Executes Below                                
##########################################################################################
------------------------------------------------------------------------------------------
'''
if __name__ == "__main__":
    
    try:
        JobID = sys.argv[1]
    except IndexError:
        print("No job ID provided")
        usage(1)

    running = job_is_running(JobID)
    if running == True:
        running_dict = running_job_data(JobID)
    else:
        running_dict = {}
    sacct_dict = sacct_job_data(JobID)
    display(sacct_dict,running_dict)
